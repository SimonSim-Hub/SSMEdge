<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ssm.edge.core.main">
    <select id="selectTagLowDataMinDate" resultType="String">
        SELECT MIN(otime) AS minTime
          FROM x_das_vibration_sensor_low_data_wide_table
    </select>

    <select id="selectVibrationSensorLowDataGrouppingList" parameterType="com.ssm.edge.core.main.vo.VibrationSensorLowDataVO" resultType="com.ssm.edge.core.main.vo.VibrationSensorLowDataVO">
        <![CDATA[
        SELECT A.sensorfullname_value AS sensorFullname
             , B.sensor_code AS sensorCode
             , B.sensor_name AS sensorName
             , B.device_code AS deviceCode
             , C.device_name AS deviceName
             , C.location_code AS locationCode
             , D.location_name AS locationName
             , ROUND(CAST(AVG(A.z_axis_rms_velocity_mm_value::real) AS numeric), 3) AS zAxisRmsVelocityMmValue
             , ROUND(CAST(AVG(A.temperature_c_value::real) AS numeric), 3) AS temperatureCValue
             , ROUND(CAST(AVG(A.x_axis_rms_velocity_mm_value::real) AS numeric), 3) AS xAxisRmsVelocityMmValue
             , ROUND(CAST(AVG(A.z_axis_peak_acceleration_value::real) AS numeric), 3) AS zAxisPeakAccelerationValue
             , ROUND(CAST(AVG(A.x_axis_peak_acceleration_value::real) AS numeric), 3) AS xAxisPeakAccelerationValue
             , ROUND(CAST(AVG(A.z_axis_peak_velocity_component_frequency_value::real) AS numeric), 3) AS zAxisPeakVelocityComponentFrequencyValue
             , ROUND(CAST(AVG(A.x_axis_peak_velocity_component_frequency_value::real) AS numeric), 3) AS xAxisPeakVelocityComponentFrequencyValue
             , ROUND(CAST(AVG(A.z_axis_rms_acceleration_value::real) AS numeric), 3) AS zAxisRmsAccelerationValue
             , ROUND(CAST(AVG(A.x_axis_rms_acceleration_value::real) AS numeric), 3) AS xAxisRmsAccelerationValue
             , ROUND(CAST(AVG(A.z_axis_kurtosis_value::real) AS numeric), 3) AS zAxisKurtosisValue
             , ROUND(CAST(AVG(A.x_axis_kurtosis_value::real) AS numeric), 3) AS xAxisKurtosisValue
             , ROUND(CAST(AVG(A.z_axis_crest_factor_value::real) AS numeric), 3) AS zAxisCrestFactorValue
             , ROUND(CAST(AVG(A.x_axis_crest_factor_value::real) AS numeric), 3) AS xAxisCrestFactorValue
             , ROUND(CAST(AVG(A.z_axis_peak_velocity_mm_value::real) AS numeric), 3) AS zAxisPeakVelocityMmValue
             , ROUND(CAST(AVG(A.x_axis_peak_velocity_mm_value::real) AS numeric), 3) AS xAxisPeakVelocityMmValue
             , ROUND(CAST(AVG(A.z_axis_high_frequency_rms_acceleration_value::real) AS numeric), 3) AS zAxisHighFrequencyRmsAccelerationValue
             , ROUND(CAST(AVG(A.x_axis_high_frequency_rms_acceleration_value::real) AS numeric), 3) AS xAxisHighFrequencyRmsAccelerationValue
        FROM ( SELECT otime
                    , sensorfullname_value
                    , z_axis_rms_velocity_mm_value
                    , temperature_c_value
                    , x_axis_rms_velocity_mm_value
                    , z_axis_peak_acceleration_value
                    , x_axis_peak_acceleration_value
                    , z_axis_peak_velocity_component_frequency_value
                    , x_axis_peak_velocity_component_frequency_value
                    , z_axis_rms_acceleration_value
                    , x_axis_rms_acceleration_value
                    , z_axis_kurtosis_value
                    , x_axis_kurtosis_value
                    , z_axis_crest_factor_value
                    , x_axis_crest_factor_value
                    , z_axis_peak_velocity_mm_value
                    , x_axis_peak_velocity_mm_value
                    , z_axis_high_frequency_rms_acceleration_value
                    , x_axis_high_frequency_rms_acceleration_value
               FROM x_das_vibration_sensor_low_data_wide_table
               WHERE otime >= #{startDate}
                 AND #{endDate} > otime ) A
                LEFT JOIN turck_admin_sensor_master B
                  ON A.sensorfullname_value = B.sensor_fullname
                LEFT JOIN turck_admin_device_master C
                  ON B.device_code = C.device_code
                LEFT JOIN turck_admin_location_master D
                  ON C.location_code = D.location_code
        GROUP BY A.sensorfullname_value, B.sensor_code, B.sensor_name, B.device_code, C.location_code, C.device_name, D.location_name
        ]]>
    </select>

    <delete id="deleteVibrationSensorLowDataGrouppingList" parameterType="com.ssm.edge.core.main.vo.VibrationSensorLowDataVO">
        <![CDATA[
        DELETE
          FROM x_das_vibration_sensor_low_data_wide_table
         WHERE otime >= #{startDate}
           AND otime < #{endDate}
        ]]>
    </delete>

    <select id="selectSensorCount" parameterType="HashMap" resultType="int">
        SELECT COUNT(*) AS sensorCount
          FROM turck_admin_sensor_master A
          LEFT JOIN turck_admin_device_master B
            ON A.device_code = B.device_code
        WHERE 1=1
        <if test="@com.ssm.edge.core.util.EmptyCheck@notEmpty(deviceCode)">
         AND A.device_code = #{deviceCode}
        </if>
        <if test="@com.ssm.edge.core.util.EmptyCheck@notEmpty(locationCode)">
            AND B.location_code = #{locationCode}
        </if>
    </select>

    <select id="selectMasterCode" parameterType="String" resultType="com.ssm.edge.core.main.vo.MasterCodeVO">
        SELECT A.sensor_code AS sensorCode
             , A.device_code AS deviceCode
             , B.location_code AS locationCode
        FROM turck_admin_sensor_master A
        LEFT JOIN turck_admin_device_master B
        ON A.device_code = B.device_code
        WHERE sensor_code = #{sensorCode}
    </select>

    <insert id="insertVibrationSensorLowDataHotList" parameterType="com.ssm.edge.core.main.vo.VibrationSensorLowDataVO">
        INSERT INTO x_das_vibration_sensor_low_hot_data_table
        ( otime
        , sensor_code
        , sensor_name
        , sensor_fullname
        , device_code
        , device_name
        , location_code
        , location_name
        , z_axis_rms_velocity_mm_value
        , temperature_c_value
        , x_axis_rms_velocity_mm_value
        , z_axis_peak_acceleration_value
        , x_axis_peak_acceleration_value
        , z_axis_peak_velocity_component_frequency_value
        , x_axis_peak_velocity_component_frequency_value
        , z_axis_rms_acceleration_value
        , x_axis_rms_acceleration_value
        , x_axis_kurtosis_value
        , z_axis_kurtosis_value
        , z_axis_crest_factor_value
        , x_axis_crest_factor_value
        , z_axis_peak_velocity_mm_value
        , x_axis_peak_velocity_mm_value
        , z_axis_high_frequency_rms_acceleration_value
        , x_axis_high_frequency_rms_acceleration_value )
        VALUES
            ( #{oTime}
            , #{sensorCode}
            , #{sensorName}
            , #{sensorFullname}
            , #{deviceCode}
            , #{deviceName}
            , #{locationCode}
            , #{locationName}
            , #{zAxisRmsVelocityMmValue}
            , #{temperatureCValue}
            , #{xAxisRmsVelocityMmValue}
            , #{zAxisPeakAccelerationValue}
            , #{xAxisPeakAccelerationValue}
            , #{zAxisPeakVelocityComponentFrequencyValue}
            , #{xAxisPeakVelocityComponentFrequencyValue}
            , #{zAxisRmsAccelerationValue}
            , #{xAxisRmsAccelerationValue}
            , #{zAxisKurtosisValue}
            , #{xAxisKurtosisValue}
            , #{zAxisCrestFactorValue}
            , #{xAxisCrestFactorValue}
            , #{zAxisPeakVelocityMmValue}
            , #{xAxisPeakVelocityMmValue}
            , #{zAxisHighFrequencyRmsAccelerationValue}
            , #{xAxisHighFrequencyRmsAccelerationValue} )
    </insert>

    <select id="selectVibrationSensorLowDataHotListCount" resultType="int">
        SELECT COUNT(*) AS dataCount
        FROM x_das_vibration_sensor_low_hot_data_table
    </select>

    <select id="selectVibrationSensorLowDataHotListMinDate" parameterType="int" resultType="Date">
        SELECT MIN(oTime) AS minDate
        FROM (
             SELECT otime
             FROM x_das_vibration_sensor_low_hot_data_table
             ORDER BY otime DESC
                 LIMIT #{dataCount} ) A
    </select>


    <delete id="deleteVibrationSensorLowDataHotList" parameterType="Date">
        <![CDATA[
        DELETE
        FROM x_das_vibration_sensor_low_hot_data_table
        WHERE otime < #{minDate}
        ]]>
    </delete>

    <select id="selectVibrationSensorLowDataLastCountList" parameterType="HashMap" resultType="com.ssm.edge.core.main.vo.VibrationSensorLowDataVO">
        SELECT (ROW_NUMBER() OVER (ORDER BY A.otime DESC)) AS rowNum
            , TO_CHAR(A.otime, 'YYYY-MM-DD HH24:MI:SS.MS') AS oTime
            , A.sensor_code AS sensorCode
            , A.sensor_name AS sensorName
            , A.sensor_fullname AS sensorFullname
            , A.device_code AS deviceCode
            , A.device_name AS deviceName
            , A.location_code AS locationCode
            , A.location_name AS locationName
            , A.x_axis_rms_velocity_mm_value AS xAxisRmsVelocityMmValue
            , A.z_axis_rms_velocity_mm_value AS zAxisRmsVelocityMmValue
            , A.z_axis_peak_acceleration_value AS zAxisPeakAccelerationValue
            , A.x_axis_peak_acceleration_value AS xAxisPeakAccelerationValue
            , A.temperature_c_value AS temperatureCValue
            , A.z_axis_peak_velocity_component_frequency_value AS zAxisPeakVelocityComponentFrequencyValue
            , A.x_axis_peak_velocity_component_frequency_value AS xAxisPeakVelocityComponentFrequencyValue
            , A.z_axis_rms_acceleration_value AS zAxisRmsAccelerationValue
            , A.x_axis_rms_acceleration_value AS xAxisRmsAccelerationValue
            , A.x_axis_kurtosis_value AS zAxisKurtosisValue
            , A.z_axis_kurtosis_value AS xAxisKurtosisValue
            , A.z_axis_crest_factor_value AS zAxisCrestFactorValue
            , A.x_axis_crest_factor_value AS xAxisCrestFactorValue
            , A.z_axis_peak_velocity_mm_value AS zAxisPeakVelocityMmValue
            , A.x_axis_peak_velocity_mm_value AS xAxisPeakVelocityMmValue
            , A.z_axis_high_frequency_rms_acceleration_value AS zAxisHighFrequencyRmsAccelerationValue
            , A.x_axis_high_frequency_rms_acceleration_value AS xAxisHighFrequencyRmsAccelerationValue
        FROM (
        SELECT otime
            , sensor_code
            , sensor_name
            , sensor_fullname
            , device_code
            , device_name
            , location_code
            , location_name
            , ROUND(z_axis_rms_velocity_mm_value::NUMERIC, 3) AS z_axis_rms_velocity_mm_value
            , ROUND(temperature_c_value::NUMERIC, 3) AS temperature_c_value
            , ROUND(x_axis_rms_velocity_mm_value::NUMERIC, 3) AS x_axis_rms_velocity_mm_value
            , ROUND(z_axis_peak_acceleration_value::NUMERIC, 3) AS z_axis_peak_acceleration_value
            , ROUND(x_axis_peak_acceleration_value::NUMERIC, 3) AS x_axis_peak_acceleration_value
            , ROUND(z_axis_peak_velocity_component_frequency_value::NUMERIC, 3) AS z_axis_peak_velocity_component_frequency_value
            , ROUND(x_axis_peak_velocity_component_frequency_value::NUMERIC, 3) AS x_axis_peak_velocity_component_frequency_value
            , ROUND(z_axis_rms_acceleration_value::NUMERIC, 3) AS z_axis_rms_acceleration_value
            , ROUND(x_axis_rms_acceleration_value::NUMERIC, 3) AS x_axis_rms_acceleration_value
            , ROUND(z_axis_kurtosis_value::NUMERIC, 3) AS z_axis_kurtosis_value
            , ROUND(x_axis_kurtosis_value::NUMERIC, 3) AS x_axis_kurtosis_value
            , ROUND(z_axis_crest_factor_value::NUMERIC, 3) AS z_axis_crest_factor_value
            , ROUND(x_axis_crest_factor_value::NUMERIC, 3) AS x_axis_crest_factor_value
            , ROUND(x_axis_peak_velocity_mm_value::NUMERIC, 3) AS x_axis_peak_velocity_mm_value
            , ROUND(z_axis_peak_velocity_mm_value::NUMERIC, 3) AS z_axis_peak_velocity_mm_value
            , ROUND(z_axis_high_frequency_rms_acceleration_value::NUMERIC, 3) AS z_axis_high_frequency_rms_acceleration_value
            , ROUND(x_axis_high_frequency_rms_acceleration_value::NUMERIC, 3) AS x_axis_high_frequency_rms_acceleration_value
        FROM x_das_vibration_sensor_low_hot_data_table
        WHERE 1 = 1
        <if test="@com.ssm.edge.core.util.EmptyCheck@notEmpty(locationCode)">
            AND location_code = #{locationCode}
        </if>
        <if test="@com.ssm.edge.core.util.EmptyCheck@notEmpty(deviceCode)">
            AND device_code = #{deviceCode}
        </if>
        <if test="@com.ssm.edge.core.util.EmptyCheck@notEmpty(sensorCode)">
            AND sensor_code = #{sensorCode}
        </if>
        ORDER BY oTime DESC
        LIMIT #{dataCount}::BIGINT) A
        ORDER BY A.oTime ASC
    </select>

    <select id="selectVibrationSensorLowDataCount" resultType="int">
        SELECT COUNT(*) AS dataCount
        FROM x_das_vibration_sensor_low_data_wide_table
    </select>

    <select id="selectTagLowDataThreadDelay" resultType="com.ssm.edge.core.main.vo.TagLowDataThreadDelayVO">
        SELECT COALESCE(MAX(timer_delay),2000) AS timerDelay
             , COUNT(*) AS dataCount
        FROM public.core_main_timer_master
    </select>

    <update id="updateTagLowDataThreadDelay" parameterType="long">
        UPDATE core_main_timer_master
        SET timer_delay=#{timerDelay}
    </update>

    <select id="selectSystemSetting" resultType="com.ssm.edge.core.main.vo.ServerSettingVO">
        SELECT COALESCE(MAX(main_chart_quantity),100) AS mainChartQty
             , COALESCE(MAX(detail_chart_quantity),500) AS detailChartQty
             , COALESCE(MAX(report_chart_quantity),30000) AS reportChartQty
             , COUNT(*) AS dataCount
        FROM core_main_system_setting
    </select>

    <insert id="insertDefaultThreadDelay">
        INSERT INTO core_main_timer_master(
            timer_delay )
        VALUES (
            2000)
    </insert>

    <insert id="insertDefaultSystemSetting">
        INSERT INTO core_main_system_setting(
              main_chart_quantity
            , detail_chart_quantity
            , report_chart_quantity )
        VALUES (
             100
           , 500
           , 30000)
    </insert>

    <update id="updateDefaultSystemSetting" parameterType="HashMap">
        UPDATE core_main_system_setting
        SET main_chart_quantity = #{mainChartQty}
          , detail_chart_quantity = #{detailChartQty}
          , report_chart_quantity = #{reportChartQty}
    </update>





    <insert id="insertVibrationSensorLowDataGrouppingList" parameterType="com.ssm.edge.core.main.vo.VibrationSensorLowDataVO">
        INSERT INTO X_DAS_VIBRATION_SENSOR_LOW_COLD_DATA_TABLE
            ( otime
            , sensor_code
            , sensor_name
            , sensor_fullname
            , device_code
            , device_name
            , location_code
            , location_name
            , z_axis_rms_velocity_mm_value
            , temperature_c_value
            , x_axis_rms_velocity_mm_value
            , z_axis_peak_acceleration_value
            , x_axis_peak_acceleration_value
            , z_axis_peak_velocity_component_frequency_value
            , x_axis_peak_velocity_component_frequency_value
            , z_axis_rms_acceleration_value
            , x_axis_rms_acceleration_value
            , x_axis_kurtosis_value
            , z_axis_kurtosis_value
            , z_axis_crest_factor_value
            , x_axis_crest_factor_value
            , z_axis_peak_velocity_mm_value
            , x_axis_peak_velocity_mm_value
            , z_axis_high_frequency_rms_acceleration_value
            , x_axis_high_frequency_rms_acceleration_value )
        VALUES
            ( #{oTime}
            , #{sensorCode}
            , #{sensorName}
            , #{sensorFullname}
            , #{deviceCode}
            , #{deviceName}
            , #{locationCode}
            , #{locationName}
            , #{zAxisRmsVelocityMmValue}
            , #{temperatureCValue}
            , #{xAxisRmsVelocityMmValue}
            , #{zAxisPeakAccelerationValue}
            , #{xAxisPeakAccelerationValue}
            , #{zAxisPeakVelocityComponentFrequencyValue}
            , #{xAxisPeakVelocityComponentFrequencyValue}
            , #{zAxisRmsAccelerationValue}
            , #{xAxisRmsAccelerationValue}
            , #{xAxisKurtosisValue}
            , #{zAxisKurtosisValue}
            , #{zAxisCrestFactorValue}
            , #{xAxisCrestFactorValue}
            , #{zAxisPeakVelocityMmValue}
            , #{xAxisPeakVelocityMmValue}
            , #{zAxisHighFrequencyRmsAccelerationValue}
            , #{xAxisHighFrequencyRmsAccelerationValue} )
    </insert>

    <select id="selectVibrationSensorReportDataList" parameterType="HashMap" resultType="com.ssm.edge.core.main.vo.VibrationSensorLowDataVO">
        SELECT (ROW_NUMBER() OVER (ORDER BY A.otime DESC)) AS rowNum
            , TO_CHAR(A.otime, 'YYYY-MM-DD HH24:MI:SS.MS') AS oTime
            , TO_CHAR(A.oTimeStr, 'YYYY-MM-DD HH24:MI:SS.MS') AS oTimeStr
            , A.sensor_code AS sensorCode
            , A.sensor_name AS sensorName
            , A.sensor_fullname AS sensorFullname
            , A.device_code AS deviceCode
            , A.device_name AS deviceName
            , A.location_code AS locationCode
            , A.location_name AS locationName
            , A.x_axis_rms_velocity_mm_value AS xAxisRmsVelocityMmValue
            , A.z_axis_rms_velocity_mm_value AS zAxisRmsVelocityMmValue
            , A.z_axis_peak_acceleration_value AS xAxisPeakAccelerationValue
            , A.x_axis_peak_acceleration_value AS zAxisPeakAccelerationValue
            , A.temperature_c_value AS temperatureCValue
            , A.z_axis_peak_velocity_component_frequency_value AS zAxisPeakVelocityComponentFrequencyValue
            , A.x_axis_peak_velocity_component_frequency_value AS xAxisPeakVelocityComponentFrequencyValue
            , A.z_axis_rms_acceleration_value AS zAxisRmsAccelerationValue
            , A.x_axis_rms_acceleration_value AS xAxisRmsAccelerationValue
            , A.x_axis_kurtosis_value AS zAxisKurtosisValue
            , A.z_axis_kurtosis_value AS xAxisKurtosisValue
            , A.z_axis_crest_factor_value AS zAxisCrestFactorValue
            , A.x_axis_crest_factor_value AS xAxisCrestFactorValue
            , A.z_axis_peak_velocity_mm_value AS zAxisPeakVelocityMmValue
            , A.x_axis_peak_velocity_mm_value AS xAxisPeakVelocityMmValue
            , A.z_axis_high_frequency_rms_acceleration_value AS zAxisHighFrequencyRmsAccelerationValue
            , A.x_axis_high_frequency_rms_acceleration_value AS xAxisHighFrequencyRmsAccelerationValue
        FROM (
        SELECT otime AS oTime
            , otime AS oTimeStr
            , sensor_code
            , sensor_name
            , sensor_fullname
            , device_code
            , device_name
            , location_code
            , location_name
            , ROUND(z_axis_rms_velocity_mm_value::NUMERIC, 3) AS z_axis_rms_velocity_mm_value
            , ROUND(temperature_c_value::NUMERIC, 3) AS temperature_c_value
            , ROUND(x_axis_rms_velocity_mm_value::NUMERIC, 3) AS x_axis_rms_velocity_mm_value
            , ROUND(z_axis_peak_acceleration_value::NUMERIC, 3) AS z_axis_peak_acceleration_value
            , ROUND(x_axis_peak_acceleration_value::NUMERIC, 3) AS x_axis_peak_acceleration_value
            , ROUND(z_axis_peak_velocity_component_frequency_value::NUMERIC, 3) AS z_axis_peak_velocity_component_frequency_value
            , ROUND(x_axis_peak_velocity_component_frequency_value::NUMERIC, 3) AS x_axis_peak_velocity_component_frequency_value
            , ROUND(z_axis_rms_acceleration_value::NUMERIC, 3) AS z_axis_rms_acceleration_value
            , ROUND(x_axis_rms_acceleration_value::NUMERIC, 3) AS x_axis_rms_acceleration_value
            , ROUND(z_axis_kurtosis_value::NUMERIC, 3) AS z_axis_kurtosis_value
            , ROUND(x_axis_kurtosis_value::NUMERIC, 3) AS x_axis_kurtosis_value
            , ROUND(z_axis_crest_factor_value::NUMERIC, 3) AS z_axis_crest_factor_value
            , ROUND(x_axis_crest_factor_value::NUMERIC, 3) AS x_axis_crest_factor_value
            , ROUND(x_axis_peak_velocity_mm_value::NUMERIC, 3) AS x_axis_peak_velocity_mm_value
            , ROUND(z_axis_peak_velocity_mm_value::NUMERIC, 3) AS z_axis_peak_velocity_mm_value
            , ROUND(z_axis_high_frequency_rms_acceleration_value::NUMERIC, 3) AS z_axis_high_frequency_rms_acceleration_value
            , ROUND(x_axis_high_frequency_rms_acceleration_value::NUMERIC, 3) AS x_axis_high_frequency_rms_acceleration_value
        FROM X_DAS_VIBRATION_SENSOR_LOW_COLD_DATA_TABLE
        WHERE oTime >= TO_TIMESTAMP(#{startDate}, 'YYYY-MM-DD HH24:MI:SS')
        AND TO_TIMESTAMP(#{endDate}, 'YYYY-MM-DD HH24:MI:SS') > oTime
        <if test="@com.ssm.edge.core.util.EmptyCheck@notEmpty(locationCode)">
            AND location_code = #{locationCode}
        </if>
        <if test="@com.ssm.edge.core.util.EmptyCheck@notEmpty(deviceCode)">
            AND device_code = #{deviceCode}
        </if>
        <if test="@com.ssm.edge.core.util.EmptyCheck@notEmpty(sensorCode)">
            AND sensor_code = #{sensorCode}
        </if> ) A
        ORDER BY A.oTime ASC
    </select>

    <select id="selectVibrationSensorReportDataListCountAndDate" parameterType="com.ssm.edge.core.main.vo.CountAndDateVO" resultType="com.ssm.edge.core.main.vo.CountAndDateVO">
        SELECT COUNT(*) AS dataCount
            , MIN(oTime) AS startDate
            , MAX(oTime) AS endDate
        FROM X_DAS_VIBRATION_SENSOR_LOW_COLD_DATA_TABLE
        WHERE oTime >= TO_TIMESTAMP(#{startDate}, 'YYYY-MM-DD HH24:MI:SS')
        AND TO_TIMESTAMP(#{endDate}, 'YYYY-MM-DD HH24:MI:SS') > oTime
        <if test="@com.ssm.edge.core.util.EmptyCheck@notEmpty(locationCode)">
            AND location_code = #{locationCode}
        </if>
        <if test="@com.ssm.edge.core.util.EmptyCheck@notEmpty(deviceCode)">
            AND device_code = #{deviceCode}
        </if>
        <if test="@com.ssm.edge.core.util.EmptyCheck@notEmpty(sensorCode)">
            AND sensor_code = #{sensorCode}
        </if>
    </select>

    <select id="selectVibrationSensorReportDataLastCountList" parameterType="HashMap" resultType="com.ssm.edge.core.main.vo.VibrationSensorLowDataVO">
        SELECT (ROW_NUMBER() OVER (ORDER BY A.otime DESC)) AS rowNum
            , TO_CHAR(A.otime, 'YYYY-MM-DD HH24:MI:SS.MS') AS oTime
            , TO_CHAR(A.oTimeStr, 'YYYY-MM-DD HH24:MI:SS.MS') AS oTimeStr
            , A.sensor_code AS sensorCode
            , A.sensor_name AS sensorName
            , A.sensor_fullname AS sensorFullname
            , A.device_code AS deviceCode
            , A.device_name AS deviceName
            , A.location_code AS locationCode
            , A.location_name AS locationName
            , A.x_axis_rms_velocity_mm_value AS xAxisRmsVelocityMmValue
            , A.z_axis_rms_velocity_mm_value AS zAxisRmsVelocityMmValue
            , A.z_axis_peak_acceleration_value AS xAxisPeakAccelerationValue
            , A.x_axis_peak_acceleration_value AS zAxisPeakAccelerationValue
            , A.temperature_c_value AS temperatureCValue
            , A.z_axis_peak_velocity_component_frequency_value AS zAxisPeakVelocityComponentFrequencyValue
            , A.x_axis_peak_velocity_component_frequency_value AS xAxisPeakVelocityComponentFrequencyValue
            , A.z_axis_rms_acceleration_value AS zAxisRmsAccelerationValue
            , A.x_axis_rms_acceleration_value AS xAxisRmsAccelerationValue
            , A.x_axis_kurtosis_value AS zAxisKurtosisValue
            , A.z_axis_kurtosis_value AS xAxisKurtosisValue
            , A.z_axis_crest_factor_value AS zAxisCrestFactorValue
            , A.x_axis_crest_factor_value AS xAxisCrestFactorValue
            , A.z_axis_peak_velocity_mm_value AS zAxisPeakVelocityMmValue
            , A.x_axis_peak_velocity_mm_value AS xAxisPeakVelocityMmValue
            , A.z_axis_high_frequency_rms_acceleration_value AS zAxisHighFrequencyRmsAccelerationValue
            , A.x_axis_high_frequency_rms_acceleration_value AS xAxisHighFrequencyRmsAccelerationValue
        FROM (
        SELECT otime AS oTime
            , otime AS oTimeStr
            , sensor_code
            , sensor_name
            , sensor_fullname
            , device_code
            , device_name
            , location_code
            , location_name
            , ROUND(z_axis_rms_velocity_mm_value::NUMERIC, 3) AS z_axis_rms_velocity_mm_value
            , ROUND(temperature_c_value::NUMERIC, 3) AS temperature_c_value
            , ROUND(x_axis_rms_velocity_mm_value::NUMERIC, 3) AS x_axis_rms_velocity_mm_value
            , ROUND(z_axis_peak_acceleration_value::NUMERIC, 3) AS z_axis_peak_acceleration_value
            , ROUND(x_axis_peak_acceleration_value::NUMERIC, 3) AS x_axis_peak_acceleration_value
            , ROUND(z_axis_peak_velocity_component_frequency_value::NUMERIC, 3) AS z_axis_peak_velocity_component_frequency_value
            , ROUND(x_axis_peak_velocity_component_frequency_value::NUMERIC, 3) AS x_axis_peak_velocity_component_frequency_value
            , ROUND(z_axis_rms_acceleration_value::NUMERIC, 3) AS z_axis_rms_acceleration_value
            , ROUND(x_axis_rms_acceleration_value::NUMERIC, 3) AS x_axis_rms_acceleration_value
            , ROUND(z_axis_kurtosis_value::NUMERIC, 3) AS z_axis_kurtosis_value
            , ROUND(x_axis_kurtosis_value::NUMERIC, 3) AS x_axis_kurtosis_value
            , ROUND(z_axis_crest_factor_value::NUMERIC, 3) AS z_axis_crest_factor_value
            , ROUND(x_axis_crest_factor_value::NUMERIC, 3) AS x_axis_crest_factor_value
            , ROUND(x_axis_peak_velocity_mm_value::NUMERIC, 3) AS x_axis_peak_velocity_mm_value
            , ROUND(z_axis_peak_velocity_mm_value::NUMERIC, 3) AS z_axis_peak_velocity_mm_value
            , ROUND(z_axis_high_frequency_rms_acceleration_value::NUMERIC, 3) AS z_axis_high_frequency_rms_acceleration_value
            , ROUND(x_axis_high_frequency_rms_acceleration_value::NUMERIC, 3) AS x_axis_high_frequency_rms_acceleration_value
        FROM X_DAS_VIBRATION_SENSOR_LOW_COLD_DATA_TABLE
        WHERE oTime >= TO_TIMESTAMP(#{startDate}, 'YYYY-MM-DD HH24:MI:SS')
        AND TO_TIMESTAMP(#{endDate}, 'YYYY-MM-DD HH24:MI:SS') > oTime
        <if test="@com.ssm.edge.core.util.EmptyCheck@notEmpty(locationCode)">
            AND location_code = #{locationCode}
        </if>
        <if test="@com.ssm.edge.core.util.EmptyCheck@notEmpty(deviceCode)">
            AND device_code = #{deviceCode}
        </if>
        <if test="@com.ssm.edge.core.util.EmptyCheck@notEmpty(sensorCode)">
            AND sensor_code = #{sensorCode}
        </if>
        LIMIT #{dataLastCount}) A
        ORDER BY A.oTime ASC
    </select>
</mapper>